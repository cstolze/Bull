Type True : Type;
Type False : Type;
Constant true : True;
Constant false : False;

Constant and : (True -> True -> True) & ((True|False) -> False -> False) & (False -> (True|False) -> False);
Constant not : (True -> False) & (False -> True);

Proof or : (True -> (True | False) -> True) & ((True | False) -> True -> True) & (False -> False -> False);
inter;
intro x;
intro y;
union y', True, False;
exact proj_r not (proj_r proj_r and (proj_l not x) (inj_r (proj_l not y')));
exact proj_r not (proj_r proj_r and (proj_l not x) (inj_l (proj_r not y')));
exact y;
inter;
intro x;
intro y;
union x', True, False;
exact (proj_r not (proj_r proj_r and (proj_l not x') (inj_r (proj_l not y))));
exact proj_r not (proj_l proj_r and (inj_l (proj_r not x')) (proj_l not y));
exact x;
intro x;
intro y;
exact proj_l not (proj_l and (proj_r not x) (proj_r not y));