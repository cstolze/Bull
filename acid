Type Id : Type;
Type Delta : Type;
Type Sigma : Type;
Type Gamma : Type;
Type Correct : !g : Gamma. !d : Delta. !s : Sigma. Type;

Constant nil : Gamma;
Constant cons : Id -> Sigma -> Gamma -> Gamma;

Constant xyz : Id -> Delta;
Constant star : Delta;
Constant app : Delta -> Delta -> Delta;
Constant abst : (Delta -> Delta) -> Delta;
Constant pair : Delta -> Delta -> Delta;
Constant copair : (Delta -> Delta) -> (Delta -> Delta) -> Delta -> Delta;
Constant pr1 : Delta -> Delta;
Constant pr2 : Delta -> Delta;
Constant in1 : Delta -> Delta;
Constant in2 : Delta -> Delta;

Constant omega : Sigma;
Constant arrow : Sigma -> Sigma -> Sigma;
Constant and : Sigma -> Sigma -> Sigma;
Constant or : Sigma -> Sigma -> Sigma;

Type is_in : !g : Gamma. !d : Id. !s : Sigma. Type;
Constant is_base : !g : Gamma. !d : Id. !s : Sigma. is_in (cons d s g) d s;
Constant is_rec : !g : Gamma. !d : Id. !s : Sigma. !d' : Id. !s' : Sigma. is_in g d s -> is_in (cons d' s' g) d s;

Type same_essence : !d : Delta. !d' : Delta. Type;
Constant sym_essence : !d : Delta. !d' : Delta. same_essence d d' -> same_essence d' d;
Constant refl_essence : !d : Delta. same_essence d d;
Constant omega_essence : !d : Delta. same_essence d star;
Constant abst_essence : !d : Delta -> Delta. !d' : Delta -> Delta. (!x : Delta. same_essence (d x) (d' x)) -> same_essence (abst d) (abst d');
Constant app_essence : !d1 : Delta. !d2 : Delta. !d1': Delta. !d2' : Delta. same_essence d1 d1' -> same_essence d2 d2' -> same_essence (app d1 d2) (app d1' d2');
Constant copair_essence : !d1 : Delta -> Delta. !d2 : Delta -> Delta. !d3 : Delta. !d' : Delta. same_essence (abst d1) (abst d2) -> same_essence (d1 d3) d' -> same_essence (copair d1 d2 d3) d';
Constant pair_essence : !d1 : Delta. !d2 : Delta. !d' : Delta. same_essence d1 d2 -> same_essence d1 d' -> same_essence (pair d1 d2) d';
Constant pr1_essence : !d1 : Delta. !d2 : Delta. same_essence d1 d2 -> same_essence (pr1 d1) d2;
Constant pr2_essence : !d1 : Delta. !d2 : Delta. same_essence d1 d2 -> same_essence (pr2 d1) d2;
Constant in1_essence : !d1 : Delta. !d2 : Delta. same_essence d1 d2 -> same_essence (in1 d1) d2;
Constant in2_essence : !d1 : Delta. !d2 : Delta. same_essence d1 d2 -> same_essence (in2 d1) d2;

Constant omega_rule : !g : Gamma. Correct g star omega;
Constant var_rule : !g : Gamma. !x : Id. !s : Sigma. is_in g x s -> Correct g (xyz x) s;
Constant abst_rule : !g : Gamma. !d : Delta -> Delta. !s1 : Sigma. !s2 : Sigma. (!x : Id. Correct (cons x s1 g) (d (xyz x)) s2) -> Correct g (abst d) (arrow s1 s2);
Constant app_rule : !g : Gamma. !d1 : Delta. !d2 : Delta. !s1 : Sigma. !s2 : Sigma. Correct g d1 (arrow s1 s2) -> Correct g d2 s1 -> Correct g (app d1 d2) s2;
Constant andi_rule : !g : Gamma. !d1 : Delta. !d2 : Delta. !s1 : Sigma. !s2 : Sigma. Correct g d1 s1 -> Correct g d2 s2 -> same_essence d1 d2 -> Correct g (pair d1 d2) (and s1 s2);
Constant ande_rule : !g : Gamma. !d : Delta. !s1 : Sigma. !s2 : Sigma. Correct g d (and s1 s2) -> Correct g (pr1 d) s1;
Constant ande_rule' : !g : Gamma. !d : Delta. !s1 : Sigma. !s2 : Sigma. Correct g d (and s1 s2) -> Correct g (pr2 d) s2;
Constant ori_rule : !g : Gamma. !d : Delta. !s1 : Sigma. !s2 : Sigma. Correct g d s1 -> Correct g (in1 d) (or s1 s2);
Constant ori_rule' : !g : Gamma. !d : Delta. !s1 : Sigma. !s2 : Sigma. Correct g d s2 -> Correct g (in2 d) (or s1 s2);
Constant ore_rule : !g : Gamma. !d1 : Delta -> Delta. !d2 : Delta -> Delta. !d3 : Delta. !s1 : Sigma. !s2 : Sigma. !s3 : Sigma. Correct g (abst d1) (arrow s1 s3) -> Correct g (abst d2) (arrow s2 s3) -> Correct g d3 (or s1 s2) -> same_essence (abst d1) (abst d2) -> Correct g (copair d1 d2 d3) s3;



Constant s : Sigma;
Constant t : Sigma;
Definition id = abst (\x : Delta.x);
Definition id' = pair id id;
Definition idtype = and (arrow s s) (arrow t t);
Definition proof = andi_rule nil id id (arrow s s) (arrow t t) (abst_rule nil (\x : Delta. x) s s (\x : Id. var_rule (cons x s nil) x s (is_base nil x s))) (abst_rule nil (\x : Delta. x) t t (\x : Id. var_rule (cons x t nil) x t (is_base nil x t))) (refl_essence id) : Correct nil id' idtype;


